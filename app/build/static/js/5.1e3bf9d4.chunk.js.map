{"version":3,"sources":["settings/index.js","services/MovieFinder.js","components/helpers/MovieCard.js","helpers/_functions/db.js","components/views/Favorites.js"],"names":["movieFinder","this","apiBaseUrl","imageBaseUrl","moviePath","size","process","profilePath","movie","page","Promise","resolve","reject","url","settings","fetch","then","response","json","data","status_code","status_message","results","actorId","urlDetails","movieId","props","btnAction","viewOnly","onClick","addToFavorite","className","onlyDelete","inFav","deleteMovieFromFavorites","navigator","onLine","src","movieImage","seeMovieDetails","id","alt","title","moment","release_date","format","indexedDbSupported","getDatabase","a","openDB","upgrade","db","oldVersion","newVersion","store","createObjectStore","keyPath","autoIncrement","createIndex","overview","poster_path","getAllFromIndex","dbMovies","find","add","catch","err","console","error","getKeyFromIndex","movieKey","delete","Favorites","getFavoritesMovies","movies","setState","deleteMovieAction","state","filter","history","push","deleteMoviefromFavAndRegenerateList","mov","window","undefined","role","aria-label","length","map","getImageMovie","key","React","Component","withRouter"],"mappings":"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","file":"static/js/5.1e3bf9d4.chunk.js","sourcesContent":["export default {\n  apiKey: \"dc090ca63005b139171720979eb0186c\"\n}","import settings from \"../settings\";\nexport default class movieFinder {\n  constructor() {\n    this.apiBaseUrl = \"https://api.themoviedb.org/3\";\n    this.imageBaseUrl = \"https://image.tmdb.org/t/p\"\n  } \n\n  getImageMovie(moviePath, size = 500) {\n    return moviePath ? `${this.imageBaseUrl}/w${size}${moviePath}` : `${process.env.PUBLIC_URL}/placeholder.jpg`;\n  }\n\n  getActorProfile(profilePath, size = 200) {\n    return profilePath ? `${this.imageBaseUrl}/w${size}${profilePath}` : \"https://via.placeholder.com/200x300\";\n  }  \n\n  searchMovie(movie, page) {\n    return new Promise((resolve, reject) => {\n      const url = `${this.apiBaseUrl}/search/movie?api_key=${settings.apiKey}&language=fr-FR&query=${movie}&page=${page}`;\n      fetch(url)\n        .then(response => response.json())\n        .then(data => {\n          if (data.status_code === 7) {\n            reject(data.status_message);\n          } else {\n            resolve(data.results)\n          }\n        })\n    })\n  }\n\n  getActorDetails(actorId) {\n    return new Promise((resolve, reject) => {\n      const urlDetails = `${this.apiBaseUrl}/person/${actorId}?api_key=${settings.apiKey}&language=fr-FR`;\n      fetch(urlDetails)\n      .then(response => response.json())\n      .then(data => {\n        if (!data) {\n          return reject()\n        }\n\n        return resolve(data);\n      })\n    })\n  }\n\n  getActorMovies(actorId) {\n    return new Promise((resolve, reject) => {\n      const urlDetails = `${this.apiBaseUrl}/person/${actorId}/movie_credits?api_key=${settings.apiKey}&language=fr-FR`;\n      fetch(urlDetails)\n      .then(response => response.json())\n      .then(data => {\n        if (!data) {\n          return reject()\n        }\n\n        return resolve(data);\n      })\n    })\n  }\n\n  \n\n  getMovieDetail(movieId) {\n    return new Promise((resolve, reject) => {\n      const url = `${this.apiBaseUrl}/movie/${movieId}?api_key=${settings.apiKey}&language=fr-FR`;\n      fetch(url)\n        .then(response => response.json())\n        .then(data => {\n          if (data.status_code === 7) {\n            reject(data.status_message);\n          } else {\n            resolve(data)\n          }\n        })\n    })\n  }\n\n  getMovieCredits(movieId) {\n    return new Promise((resolve, reject) => {\n      const url = `${this.apiBaseUrl}/movie/${movieId}/credits?api_key=${settings.apiKey}&language=fr-FR`;\n      fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        if (data.status_code === 7) {\n          reject(data.status_message);\n        } else {\n          resolve(data)\n        }\n      })\n    })\n  }\n}","import React from \"react\";\nimport moment from \"moment\";\n\nexport default (props) => {\n  let btnAction = null;\n  \n  if (!props.viewOnly) {\n    btnAction = <button onClick={() => props.addToFavorite(props.movie)} className=\"btn-action add-to-favorites\">Ajouter</button>;\n  \n    if (props.onlyDelete || props.movie.inFav) {\n      btnAction = <button onClick={() => props.deleteMovieFromFavorites(props.movie)} className=\"btn-action remove-from-favorites\">Supprimer</button>\n    }\n  }\n  \n  return (\n    <li className=\"movie-card\">\n      {navigator.onLine && <img src={props.movieImage} onClick={() => props.seeMovieDetails(props.movie.id)} alt={`Affiche de ${props.movie.title}`} className=\"movie-card__img cursorPointer\" />}\n      <p className=\"movie-card__title\">{props.movie.title}</p>\n      <p className=\"movie-card__release\">{moment(props.movie.release_date).format(\"DD/MM/YYYY\")}</p>\n      <div className=\"movie-card__action\">\n        {props.indexedDbSupported && btnAction }\n        {navigator.onLine && <button onClick={() => props.seeMovieDetails(props.movie.id)} className=\"btn-action movie-details\">Détails</button> }\n      </div>\n    </li>\n  )\n}","import { openDB } from 'idb';\n\nconst getDatabase = async () => \n   await openDB(\"movies\", 1, {\n      upgrade(db, oldVersion, newVersion) {\n        const store = db.createObjectStore('favorites', {\n          keyPath: 'id',\n          autoIncrement: true,\n        });\n        // Create an index on the 'date' property of the objects.\n        store.createIndex('title', 'title');\n        store.createIndex('movieId', 'movieId');\n      }\n    });\n\nconst addToFavorite = async (movie) => \n  new Promise((resolve, reject) => {\n    const { id, title, overview, poster_path, release_date } = movie;\n  \n    getDatabase()\n    .then(async db => {\n      const dbMovies = await db.getAllFromIndex('favorites', 'title');\n      const existingMovie = dbMovies.find(movie => movie.movieId === id);\n    \n      if (!existingMovie) {\n        await db.add('favorites', {\n          movieId: id,\n          title,\n          overview,\n          poster_path,\n          release_date\n        });\n        resolve()\n      } else {\n        reject(\"Movie always in DB\");\n      }\n\n    })\n    .catch(err => {\n      console.error(err)\n      reject(err)\n    })\n  })\n  \nconst deleteMovieFromFavorites = async (movieId) => \n  new Promise((resolve, reject) => {\n    getDatabase()\n    .then(async db => {\n      const movieKey = await db.getKeyFromIndex(\"favorites\", \"movieId\", movieId);\n      await db.delete(\"favorites\", movieKey);\n      resolve();\n    })\n    .catch(err => {\n      reject(err);\n    })\n  })\n\n\nexport {\n  getDatabase,\n  addToFavorite,\n  deleteMovieFromFavorites  \n}","import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nimport { getDatabase, deleteMovieFromFavorites } from \"../../helpers/_functions/db\";\n\nimport MovieCard from \"../helpers/MovieCard\";\n\nimport movieFinder from \"../../services/MovieFinder\";\n\nclass Favorites extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      indexedDbSupported: ('indexedDB' in window),\n      movies: undefined,\n      db: undefined\n    }\n    this.movieFinder = new movieFinder();\n  }\n  componentDidMount() {\n    this.getFavoritesMovies()\n  }\n\n  getFavoritesMovies = () => {\n    getDatabase()\n    .then(async db => {\n      this.setState({\n        db,\n        movies: await db.getAllFromIndex('favorites', 'title')\n      }) \n    })\n    .catch(err => {\n      console.error(err);\n    }) \n  }\n\n  deleteMovieAction = movieId => {\n    deleteMovieFromFavorites(movieId)\n      .then(() => {\n        const movies = this.state.movies.filter(movie => movie.movieId !== movieId)\n        this.setState({\n          movies\n        })\n      })\n      .catch(err => {\n        console.error(err);\n      })\n  }\n\n  seeMovieDetails = id => {\n    this.props.history.push(`/movie/${id}`);\n  }\n\n  deleteMoviefromFavAndRegenerateList = (movie) => {\n    deleteMovieFromFavorites(movie.movieId)\n    .then(() => {\n        const movies = this.state.movies.filter(mov => mov.movieId !== movie.movieId)\n        this.setState({\n          movies\n        })\n      })\n      .catch(err => {\n        console.error(err);\n      })\n  }  \n  \n  render() {\n    const renderFavoritesMoviesSection = (movies) => {\n      if (!this.state.indexedDbSupported) {\n        return (\n          <p>Vous devriez utiliser un navigateur moderne pour pouvoir consulter vos films préférés</p>\n        );\n      } \n\n      return (\n        <ul className=\"layout-list\">\n          {\n            movies.map(movie => (\n              <MovieCard \n                movieImage={this.movieFinder.getImageMovie(movie.poster_path, 200)} \n                movie={movie}\n                key={`${movie.id}-${movie.release_date}`}\n                indexedDbSupported={this.state.indexedDbSupported}\n                deleteMovieFromFavorites={this.deleteMoviefromFavAndRegenerateList}\n                seeMovieDetails={() => this.seeMovieDetails(movie.movieId)}\n                onlyDelete={true}\n              />\n            )\n          )}\n        </ul>\n      );\n    }\n\n    return (\n      <section className=\"favorites-page\">\n        <h1>Mes films</h1>\n        {!navigator.onLine && <p><span role=\"img\" aria-label=\"émoji éclair\">⚡️</span> Pour pouvoir consulter le détail de vos films favoris merci d'activer votre connexion <span role=\"img\" aria-label=\"émoji éclair\">⚡️</span></p>}\n        {this.state.movies && this.state.movies.length === 0 && <p className=\"no-favories\">Aucun film n'est enregistré dans vos favoris <span role=\"img\" aria-label=\"emoji triste\">😩</span></p>}\n        {this.state.movies && this.state.movies.length > 0 && renderFavoritesMoviesSection(this.state.movies)}\n      </section>\n    );\n  }\n}\n\nexport default withRouter(Favorites)"],"sourceRoot":""}