{"version":3,"sources":["settings/index.js","services/MovieFinder.js","helpers/_functions/db.js","components/views/Movie.js"],"names":["movieFinder","this","apiBaseUrl","imageBaseUrl","moviePath","size","process","profilePath","movie","page","Promise","resolve","reject","url","settings","fetch","then","response","json","data","status_code","status_message","results","actorId","urlDetails","movieId","getDatabase","a","openDB","upgrade","db","oldVersion","newVersion","store","createObjectStore","keyPath","autoIncrement","createIndex","addToFavorite","id","title","overview","poster_path","release_date","getAllFromIndex","dbMovies","find","add","catch","err","console","error","deleteMovieFromFavorites","getKeyFromIndex","movieKey","delete","Movie","props","fetchMovie","getMovieDetail","details","getMovieCredits","casting","setState","errorFetch","renderMovieBtnAction","parseInt","isMovieInFav","seeCastingMember","history","push","renderCastingMovie","cast","length","map","actor","index","actorProfile","getActorProfile","profile_path","key","className","src","alt","name","onClick","role","aria-label","character","addMovieInFavAndRegenerateList","state","deleteMoviefromFavAndRegenerateList","renderMovie","movieImage","getImageMovie","budget","actionBtn","moment","format","vote_average","arial-label","genres","genre","undefined","indexedDbSupported","window","match","params","log","React","Component","withRouter"],"mappings":"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","file":"static/js/9.a5d64a7f.chunk.js","sourcesContent":["export default {\n  apiKey: \"dc090ca63005b139171720979eb0186c\"\n}","import settings from \"../settings\";\nexport default class movieFinder {\n  constructor()Â {\n    this.apiBaseUrl = \"https://api.themoviedb.org/3\";\n    this.imageBaseUrl = \"https://image.tmdb.org/t/p\"\n  } \n\n  getImageMovie(moviePath, size = 500) {\n    return moviePath ? `${this.imageBaseUrl}/w${size}${moviePath}` : `${process.env.PUBLIC_URL}/placeholder.jpg`;\n  }\n\n  getActorProfile(profilePath, size = 200) {\n    return profilePath ? `${this.imageBaseUrl}/w${size}${profilePath}` : \"https://via.placeholder.com/200x300\";\n  }  \n\n  searchMovie(movie, page) {\n    return new Promise((resolve, reject) => {\n      const url = `${this.apiBaseUrl}/search/movie?api_key=${settings.apiKey}&language=fr-FR&query=${movie}&page=${page}`;\n      fetch(url)\n        .then(response => response.json())\n        .then(data => {\n          if (data.status_code === 7) {\n            reject(data.status_message);\n          } else {\n            resolve(data.results)\n          }\n        })\n    })\n  }\n\n  getActorDetails(actorId) {\n    return new Promise((resolve, reject) => {\n      const urlDetails = `${this.apiBaseUrl}/person/${actorId}?api_key=${settings.apiKey}&language=fr-FR`;\n      fetch(urlDetails)\n      .then(response => response.json())\n      .then(data => {\n        if (!data) {\n          return reject()\n        }\n\n        return resolve(data);\n      })\n    })\n  }\n\n  getActorMovies(actorId) {\n    return new Promise((resolve, reject) => {\n      const urlDetails = `${this.apiBaseUrl}/person/${actorId}/movie_credits?api_key=${settings.apiKey}&language=fr-FR`;\n      fetch(urlDetails)\n      .then(response => response.json())\n      .then(data => {\n        if (!data) {\n          return reject()\n        }\n\n        return resolve(data);\n      })\n    })\n  }\n\n  \n\n  getMovieDetail(movieId) {\n    return new Promise((resolve, reject) => {\n      const url = `${this.apiBaseUrl}/movie/${movieId}?api_key=${settings.apiKey}&language=fr-FR`;\n      fetch(url)\n        .then(response => response.json())\n        .then(data => {\n          if (data.status_code === 7) {\n            reject(data.status_message);\n          } else {\n            resolve(data)\n          }\n        })\n    })\n  }\n\n  getMovieCredits(movieId) {\n    return new Promise((resolve, reject) => {\n      const url = `${this.apiBaseUrl}/movie/${movieId}/credits?api_key=${settings.apiKey}&language=fr-FR`;\n      fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        if (data.status_code === 7) {\n          reject(data.status_message);\n        } else {\n          resolve(data)\n        }\n      })\n    })\n  }\n}","import { openDB } from 'idb';\n\nconst getDatabase = async () => \n   await openDB(\"movies\", 1, {\n      upgrade(db, oldVersion, newVersion) {\n        const store = db.createObjectStore('favorites', {\n          keyPath: 'id',\n          autoIncrement: true,\n        });\n        // Create an index on the 'date' property of the objects.\n        store.createIndex('title', 'title');\n        store.createIndex('movieId', 'movieId');\n      }\n    });\n\nconst addToFavorite = async (movie) => \n  new Promise((resolve, reject) => {\n    const { id, title, overview, poster_path, release_date } = movie;\n  \n    getDatabase()\n    .then(async db => {\n      const dbMovies = await db.getAllFromIndex('favorites', 'title');\n      const existingMovie = dbMovies.find(movie => movie.movieId === id);\n    \n      if (!existingMovie) {\n        await db.add('favorites', {\n          movieId: id,\n          title,\n          overview,\n          poster_path,\n          release_date\n        });\n        resolve()\n      } else {\n        reject(\"Movie always in DB\");\n      }\n\n    })\n    .catch(err => {\n      console.error(err)\n      reject(err)\n    })\n  })\n  \nconst deleteMovieFromFavorites = async (movieId) => \n  new Promise((resolve, reject) => {\n    getDatabase()\n    .then(async db => {\n      const movieKey = await db.getKeyFromIndex(\"favorites\", \"movieId\", movieId);\n      await db.delete(\"favorites\", movieKey);\n      resolve();\n    })\n    .catch(err => {\n      reject(err);\n    })\n  })\n\n\nexport {\n  getDatabase,\n  addToFavorite,\n  deleteMovieFromFavorites  \n}","import React from \"react\";\nimport { openDB } from 'idb';\nimport { withRouter } from \"react-router-dom\";\nimport moment from \"moment\";\n\nimport { addToFavorite, deleteMovieFromFavorites } from \"../../helpers/_functions/db\"\n\nimport movieFinder from \"../../services/MovieFinder\";\n\nclass Movie extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movie: undefined,\n      errorFetch: undefined,\n      indexedDbSupported: ('indexedDB' in window),\n      isMovieInFav: undefined,\n      db: undefined\n    }\n    this.movieFinder = new movieFinder();\n  }\n\n  componentDidMount() {\n    if (this.props.match.params && this.props.match.params.id) {\n      this.fetchMovie(this.props.match.params.id);\n      this.renderMovieBtnAction(this.props.match.params.id)\n    } else {\n      console.log(\"Impossible de rÃ©cupÃ©rer le dÃ©tail du film\")\n    }\n  }\n  \n  fetchMovie = async (id) => {\n    this.movieFinder.getMovieDetail(id)\n      .then(details => {\n        this.movieFinder.getMovieCredits(id) \n          .then(casting => {\n            this.setState({\n              movie: {\n                details,\n                casting\n              }\n            })\n          })\n          .catch(error => {\n            this.setState({\n              errorFetch: true\n            })\n          })\n      })\n      .catch(error => {\n        this.setState({\n          errorFetch: true\n        })\n      })\n  }\n\n  renderMovieBtnAction = async (movieId) => {\n    const db = await openDB('movies', 1);\n\n    this.setState({\n      db\n    })\n\n    const dbMovies = await db.getAllFromIndex('favorites', 'title');\n    const existingMovie = dbMovies.find(movie => movie.movieId === parseInt(movieId));\n    \n    if(existingMovie) {\n      return this.setState({\n        isMovieInFav: true\n      })\n    } \n      \n    return this.setState({\n        isMovieInFav: false\n      })\n  }\n\n  seeCastingMember = id => this.props.history.push(`/actor/${id}`)\n\n  renderCastingMovie = casting => {\n    if (casting.cast && casting.cast.length) {\n      return casting.cast.map((actor, index) => {\n        if (index > 4) { return false;  }\n  \n        const actorProfile = this.movieFinder.getActorProfile(actor.profile_path);\n        return (\n          <li key={`${actor.id}-${index}`} className=\"movie-details__actor cursorPointer\">\n            <img src={actorProfile} alt={`profil de l'acteur ${actor.name}`} onClick={() => this.seeCastingMember(actor.id)} />\n            <p>{actor.name}</p>\n            <p><span role=\"img\" aria-label=\"emoji cinÃ©ma\">ğ¬</span> {actor.character}</p>\n          </li>\n        )\n      })\n    }\n    return (\n      <p>Impossible d'afficher le casting de ce film</p>\n    )\n  }\n\n  addMovieInFavAndRegenerateList = () => {\n    addToFavorite(this.state.movie.details)\n    .then(() => {\n      this.setState({\n        isMovieInFav: true\n      })\n    })\n    .catch(err => {\n      console.error(err)\n    })\n  }\n\n  deleteMoviefromFavAndRegenerateList = () => {\n    deleteMovieFromFavorites(this.state.movie.details.id)\n    .then(() => {\n      this.setState({\n        isMovieInFav: false\n      })\n    })\n    .catch(err => {\n      console.error(err)\n    })\n  }  \n\n  renderMovie = movie => {\n    const { details, casting } = movie;\n    const movieImage = this.movieFinder.getImageMovie(details.poster_path, 500);\n    let budget = null\n\n    if (details.budget) {\n      if (details.budget > 1000000) {\n        budget =  `${details.budget/1000000} M$`\n      } \n      budget = `${budget} $` \n    }\n    const actionBtn =\n      this.state.isMovieInFav \n        ?\n          <button onClick={this.deleteMoviefromFavAndRegenerateList} className=\"btn-action remove-from-favorites\">Supprimer des favoris</button>\n        :\n          <button onClick={this.addMovieInFavAndRegenerateList} className=\"btn-action add-to-favorites\" >Ajouter aux favoris</button>\n      \n        return (\n          <div className=\"layout-single__primary\">\n            <div className=\"layout-single__primary__cover\">\n              <img src={movieImage} alt={`Affiche de ${details.title}`} />\n              {actionBtn}\n            </div>\n            <div className=\"layout-single__primary__infos\">\n              <h1>{details.title}</h1>\n    \n              <div className=\"layout-single__left-main\">\n                <p className=\"movie-details__release\"><span role=\"img\" aria-label=\"emoji calendrier\">ğ</span> {moment(details.release_date).format(\"DD/MM/YYYY\")}</p>\n                { details.vote_average && <p><span role=\"img\" aria-label=\"emoji Ã©toile\">â­ï¸</span> {details.vote_average}/10</p>}\n                { budget && <p><span role=\"img\" aria-label=\"emoji dollar\">ğµ</span> {budget}</p> }\n                { details.overview && <p className=\"longText\"><span role=\"img\" aria-label=\"emoji stylo plume\">ğ</span> {details.overview}</p>}\n    \n                <ul className=\"movie-details__genders\" arial-label=\"genres\"> \n                  {\n                    details.genres.map(\n                      (genre,index) => <li key={`${genre}-${index}`} className=\"btn-action category disabledBtn\">{genre.name}</li>\n                    )\n                  }\n                </ul>\n              </div>\n              <h2>Casting</h2>\n              <ul className=\"movie-layout-single__right\">\n                {this.renderCastingMovie(casting)}\n              </ul>\n            </div>\n          </div>\n        );\n  }\n     \n  render() {\n    return (\n      <section className=\"single-layout movie-details\">\n        { this.state.errorFetch && <p>Impossible de rÃ©cupÃ©rer les informations du film {this.props.params.match.id}</p> } \n        { this.state.movie && this.renderMovie(this.state.movie) }\n      </section>\n    );\n  }\n}\n\nexport default withRouter(Movie)"],"sourceRoot":""}